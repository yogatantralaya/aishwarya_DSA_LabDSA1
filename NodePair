import java.util.ArrayList;
import java.util.List;

//to create a binary tree
class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;

        TreeNode(int x) {
            val = x;
        }
    }

    class Solution {
        //sorts the given binary tree in a list
        public void inOrderTraversal(TreeNode root, List<Integer> sortedList) {
            if (root == null) {
                return;
            }
            inOrderTraversal(root.left, sortedList);
            sortedList.add(root.val);
            inOrderTraversal(root.right, sortedList);
        }

        public int[] findPair(TreeNode root, int targetSum) {
            List<Integer> sortedList = new ArrayList<>();
            inOrderTraversal(root, sortedList);

            //to find if the value in the list sum up to the target sum value
            int start = 0, end = sortedList.size() - 1;
            while (start < end) {
                int currSum = sortedList.get(start) + sortedList.get(end);
                if (currSum == targetSum) {
                    return new int[]{sortedList.get(start), sortedList.get(end)};
                } else if (currSum < targetSum) {
                    start++;
                } else {
                    end--;
                }
            }

            System.out.println("Nodes are not found");
            return new int[]{};
        }

    public static void main(String[] args) {
        //creating the given binary tree
        TreeNode root = new TreeNode(40);
        root.left = new TreeNode(20);
        root.right = new TreeNode(60);
        root.left.left = new TreeNode(10);
        root.left.right = new TreeNode(30);
        root.right.left = new TreeNode(50);
        root.right.right = new TreeNode(70);

        //assigning the target sum
        int targetSum = 130;
        Solution solution = new Solution();
        //passing the root element and target sum value
        int[] result = solution.findPair(root, targetSum);
        //displaying the pair which sums up to the target sum value
        if (result.length > 0) {
            System.out.println("Pair is (" + result[0] + ", " + result[1] + ")");
        }
    }
}
